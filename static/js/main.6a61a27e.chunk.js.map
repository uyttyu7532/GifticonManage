{"version":3,"sources":["components/GificonDelete.js","components/Gifticon.js","components/GifticonAdd.js","App.js","serviceWorker.js","index.js"],"names":["GifticonDelete","props","handleClickOpen","setState","open","handleClose","state","id","fetch","method","this","stateRefresh","Button","variant","color","onClick","Dialog","onClose","DialogTitle","DialogContent","Typography","gutterBottom","DialogActions","e","deleteGifticon","React","Component","Gifticon","TableRow","TableCell","src","barcode_img","alt","style","width","height","name","exp_date","used","GifticonAdd","handleFormSubmit","preventDefault","addGifticon","then","response","console","log","data","fileName","handleFileChange","target","files","value","handleValueChange","nextState","formData","FormData","append","post","headers","classes","className","hidden","type","accept","file","onChange","htmlFor","component","TextField","label","withStyles","theme","display","App","gifticons","completed","searchKeyword","callApi","res","catch","err","a","json","body","progress","timer","setInterval","root","AppBar","position","Toolbar","title","noWrap","search","searchIcon","InputBase","placeholder","inputRoot","input","inputInput","inputProps","menu","Paper","Table","table","TableHead","map","c","TableBody","filter","g","indexOf","key","colSpan","align","CircularProgress","marginTop","marginBottom","justifyContent","fontSize","margin","flexGrow","breakpoints","up","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","spacing","padding","pointerEvents","alignItems","paddingLeft","transition","transitions","create","Boolean","window","location","hostname","match","createMuiTheme","typography","fontFamily","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6a61a27e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { DialogActions } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nclass GifticonDelete extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        }\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({\r\n            open: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false\r\n        })\r\n    }\r\n\r\n    deleteGifticon(id) {\r\n        const url = 'https://gifticon-management.herokuapp.com/api/gifticons' + id;\r\n        fetch(url, {\r\n            method: 'DELETE'\r\n        });\r\n        // 새로 바뀐 목록 출력\r\n        this.props.stateRefresh();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickOpen}>사용</Button>\r\n                <Dialog open={this.state.open} onClose={this.handleClose}>\r\n                    <DialogTitle onClose={this.handleClose}>경고</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography gutterBottom>\r\n                            정말 사용하신 기프티콘입니까?\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={(e) => { this.deleteGifticon(this.props.id) }}>네</Button>\r\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={this.handleClose}>닫기</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GifticonDelete;","import React from \"react\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport GifticonDelete from \"./GificonDelete\";\r\n\r\nclass Gifticon extends React.Component {\r\n    render() {\r\n        return (\r\n            <TableRow>\r\n                {/* <TableCell>{this.props.id}</TableCell> */}\r\n                <TableCell><img src={this.props.barcode_img} alt=\"barcode_img\" style={{ width: 64, height: 64 }}></img></TableCell>\r\n                <TableCell>{this.props.name}</TableCell>\r\n                <TableCell>{this.props.exp_date}</TableCell>\r\n                <TableCell>{this.props.used}</TableCell>\r\n                <TableCell><GifticonDelete stateRefresh={this.props.stateRefresh} id={this.props.id} /></TableCell>\r\n            </TableRow>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Gifticon;","import React from 'react';\r\nimport { post } from 'axios'; // post방식으로 서버에 보내기 위해\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DialogActions } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    hidden: {\r\n        display: 'none'\r\n    }\r\n});\r\n\r\nclass GifticonAdd extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            barcode_img: null,\r\n            name: '',\r\n            exp_date: '',\r\n            used: '',\r\n            fileName: '',\r\n            open: false // 다이얼로그가 열려 있는 지\r\n        }\r\n    }\r\n\r\n    // 추가 버튼을 누르면 실행\r\n    // 내부적으로 이벤트 함수를 전달받는다.\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault() // 오류가 발생하지 않도록\r\n        this.addGifticon()\r\n            // 고객을 추가 후 서버로부터 응답받고나서 실행\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                // App.js의 stateRefresg()호출해서\r\n                // 부모 컴포넌트(App)의 state값 갱신 시켜준다.\r\n                this.props.stateRefresh();\r\n            })\r\n        this.setState({\r\n            barcode_img: null,\r\n            name: '',\r\n            exp_date: '',\r\n            used: '',\r\n            fileName: '',\r\n            open: false\r\n        })\r\n\r\n    }\r\n\r\n    // 파일 값이 변경됐을 때\r\n    handleFileChange = (e) => {\r\n        this.setState({\r\n            barcode_img: e.target.files[0],\r\n            fileName: e.target.value\r\n        })\r\n    }\r\n\r\n    // 텍스트 값이 변경됐을 때\r\n    handleValueChange = (e) => {\r\n        let nextState = {};\r\n        nextState[e.target.name] = e.target.value;\r\n        this.setState(nextState);\r\n    }\r\n\r\n    addGifticon = () => {\r\n        const url = 'https://gifticon-management.herokuapp.com/api/gifticons';\r\n        // 특정한 데이터를 서버로 보내기 위해\r\n        const formData = new FormData();\r\n        formData.append('barcode_img', this.state.barcode_img);\r\n        formData.append('name', this.state.name);\r\n        formData.append('exp_date', this.state.exp_date);\r\n        formData.append('used', this.state.used);\r\n        // 파일이 포함된 데이터를 서버로 전송 => header추가 \r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }\r\n        return post(url, formData, config);\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({\r\n            open: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            barcode_img: null,\r\n            name: '',\r\n            exp_date: '',\r\n            used: '',\r\n            fileName: '',\r\n            open: false // 다이얼로그가 열려 있는 지\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                    추가하기\r\n                </Button>\r\n                <Dialog open={this.state.open} onClose={this.handleClose}>\r\n                    <DialogTitle>기프티콘 추가</DialogTitle>\r\n                    <DialogContent>\r\n                        <input className={classes.hidden} type=\"file\" accept=\"image/*\" id=\"raised-button-file\" file={this.state.barcode_img} value={this.state.fileName} onChange={this.handleFileChange} />\r\n                        <label htmlFor=\"raised-button-file\">\r\n                            <Button variant=\"contained\" color=\"primary\" component=\"span\" name=\"file\">\r\n                                {this.state.fileName === \"\" ? \"기프티콘 이미지 선택\" : this.state.fileName}\r\n                            </Button>\r\n                        </label>\r\n                        <br />\r\n                        <TextField label=\"이름\" type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleValueChange} /><br />\r\n                        <TextField label=\"유효기한\" type=\"text\" name=\"exp_date\" value={this.state.exp_date} onChange={this.handleValueChange} /><br />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleFormSubmit}>추가</Button>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>닫기</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(GifticonAdd);","import React, { Component } from 'react';\nimport './App.css';\nimport Gifticon from './components/Gifticon';\nimport GifticonAdd from './components/GifticonAdd';\nimport Table from \"@material-ui/core/Table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n// import MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    // minWidth: 1080\n\n  },\n  menu: {\n    marginTop: 15,\n    marginBottom: 15,\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  TableHead: {\n    fontSize: '1.0rem'\n  },\n  progress: {\n    margin: 'theme.spacing(2)'\n  },\n  // menuButton: {\n  //   marginRight: theme.spacing(2),\n  // },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n})\n\n\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gifticons: '',\n      completed: 0,\n      searchKeyword:\"\"\n    }\n  }\n\n  // state 초기화\n  stateRefresh = () => {\n    this.setState({\n      gifticons: '',\n      completed: 0,\n      searchKeyword:\"\"\n    });\n    this.callApi() // 고객 데이터 불러오기\n      .then(res => this.setState({ gifticons: res })) // 받아서 state로 설정 (서버에서 받은 res가  gifticons가 됨)\n      .catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 20);\n    this.callApi()\n      .then(res => this.setState({ gifticons: res })) // 받아서 state로 설정 (서버에서 받은 res가  gifticons가 됨)\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('https://gifticon-management.herokuapp.com/api/gifticons'); // 접속하고자 하는 api주소\n    const body = await response.json(); // 목록이 json 형태로 출력\n    return body;\n  }\n\n  progress = () => {\n    const { completed } = this.state; // this.state.completed를 completed로 접근할 수 있게 해준다.\n    this.setState({ completed: completed >= 100 ? 0 : completed + 1 })\n  }\n\n  handleValueChange = (e) => {\n    let nextState = {};\n    nextState[e.target.name] = e.target.value;\n    this.setState(nextState);\n  }\n\n  render() {\n    const filteredComponenets = (data) => {\n      data = data.filter((g) => {\n        return g.name.indexOf(this.state.searchKeyword) > -1;\n      });\n      return data.map((g)=>{\n            return <Gifticon\n              stateRefresh={this.stateRefresh}\n              key={g.id}\n              id={g.id}\n              barcode_img={g.barcode_img}\n              name={g.name}\n              exp_date={g.exp_date}\n              used={g.used}\n            />\n      });\n    }\n    const { classes } = this.props;\n    const cellList = [\"사진\", \"제목\", \"유효기간\", \"사용여부\", \"설정\"];\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n            >\n              <MenuIcon />\n            </IconButton> */}\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              기프티콘 관리\n          </Typography>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <InputBase\n                placeholder=\"Search…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                name=\"searchKeyword\"\n                value={this.state.searchKeyword}\n                onChange={this.handleValueChange}\n                inputProps={{ 'aria-label': 'search' }}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.menu}>\n          <GifticonAdd stateRefresh={this.stateRefresh} />\n        </div>\n        <Paper>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                {cellList.map(c => {\n                  return <TableCell className={classes.TableHead}>{c}</TableCell>\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.gifticons ?\n                  filteredComponenets(this.state.gifticons) :\n                <TableRow>\n                  <TableCell colSpan=\"6\" align=\"center\">\n                    <CircularProgress className={classes.progress} variant=\"determinate\" value={this.state.completed} />\n                  </TableCell>\n                </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily:'\"Noto Sans KR\", serif',\n  }\n})\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n    </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}